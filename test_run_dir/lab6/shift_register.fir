;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit shift_register : 
  module shift_register : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : UInt<4>}
    
    reg state : UInt<4>, clock with : (reset => (reset, UInt<4>("h01"))) @[Execrise1.scala 11:28]
    reg register : UInt<4>[32], clock @[Execrise1.scala 12:27]
    node _next_state_T = shl(state, 1) @[Execrise1.scala 14:33]
    node next_state = or(_next_state_T, io.in) @[Execrise1.scala 14:39]
    state <= next_state @[Execrise1.scala 15:15]
    register[0] <= state @[Execrise1.scala 20:29]
    io.out <= register[0] @[Execrise1.scala 21:24]
    register[1] <= state @[Execrise1.scala 20:29]
    io.out <= register[1] @[Execrise1.scala 21:24]
    register[2] <= state @[Execrise1.scala 20:29]
    io.out <= register[2] @[Execrise1.scala 21:24]
    register[3] <= state @[Execrise1.scala 20:29]
    io.out <= register[3] @[Execrise1.scala 21:24]
    register[4] <= state @[Execrise1.scala 20:29]
    io.out <= register[4] @[Execrise1.scala 21:24]
    register[5] <= state @[Execrise1.scala 20:29]
    io.out <= register[5] @[Execrise1.scala 21:24]
    register[6] <= state @[Execrise1.scala 20:29]
    io.out <= register[6] @[Execrise1.scala 21:24]
    register[7] <= state @[Execrise1.scala 20:29]
    io.out <= register[7] @[Execrise1.scala 21:24]
    register[8] <= state @[Execrise1.scala 20:29]
    io.out <= register[8] @[Execrise1.scala 21:24]
    register[9] <= state @[Execrise1.scala 20:29]
    io.out <= register[9] @[Execrise1.scala 21:24]
    register[10] <= state @[Execrise1.scala 20:29]
    io.out <= register[10] @[Execrise1.scala 21:24]
    register[11] <= state @[Execrise1.scala 20:29]
    io.out <= register[11] @[Execrise1.scala 21:24]
    register[12] <= state @[Execrise1.scala 20:29]
    io.out <= register[12] @[Execrise1.scala 21:24]
    register[13] <= state @[Execrise1.scala 20:29]
    io.out <= register[13] @[Execrise1.scala 21:24]
    register[14] <= state @[Execrise1.scala 20:29]
    io.out <= register[14] @[Execrise1.scala 21:24]
    register[15] <= state @[Execrise1.scala 20:29]
    io.out <= register[15] @[Execrise1.scala 21:24]
    register[16] <= state @[Execrise1.scala 20:29]
    io.out <= register[16] @[Execrise1.scala 21:24]
    register[17] <= state @[Execrise1.scala 20:29]
    io.out <= register[17] @[Execrise1.scala 21:24]
    register[18] <= state @[Execrise1.scala 20:29]
    io.out <= register[18] @[Execrise1.scala 21:24]
    register[19] <= state @[Execrise1.scala 20:29]
    io.out <= register[19] @[Execrise1.scala 21:24]
    register[20] <= state @[Execrise1.scala 20:29]
    io.out <= register[20] @[Execrise1.scala 21:24]
    register[21] <= state @[Execrise1.scala 20:29]
    io.out <= register[21] @[Execrise1.scala 21:24]
    register[22] <= state @[Execrise1.scala 20:29]
    io.out <= register[22] @[Execrise1.scala 21:24]
    register[23] <= state @[Execrise1.scala 20:29]
    io.out <= register[23] @[Execrise1.scala 21:24]
    register[24] <= state @[Execrise1.scala 20:29]
    io.out <= register[24] @[Execrise1.scala 21:24]
    register[25] <= state @[Execrise1.scala 20:29]
    io.out <= register[25] @[Execrise1.scala 21:24]
    register[26] <= state @[Execrise1.scala 20:29]
    io.out <= register[26] @[Execrise1.scala 21:24]
    register[27] <= state @[Execrise1.scala 20:29]
    io.out <= register[27] @[Execrise1.scala 21:24]
    register[28] <= state @[Execrise1.scala 20:29]
    io.out <= register[28] @[Execrise1.scala 21:24]
    register[29] <= state @[Execrise1.scala 20:29]
    io.out <= register[29] @[Execrise1.scala 21:24]
    register[30] <= state @[Execrise1.scala 20:29]
    io.out <= register[30] @[Execrise1.scala 21:24]
    register[31] <= state @[Execrise1.scala 20:29]
    io.out <= register[31] @[Execrise1.scala 21:24]
    
