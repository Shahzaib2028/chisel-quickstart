;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Task1 : 
  module Queue : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, count : UInt<3>}
    
    cmem ram : UInt<32>[4] @[Decoupled.scala 218:16]
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg value_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT <= io.enq.bits @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      skip @[Decoupled.scala 233:17]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _io_deq_valid_T = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 259:14]
    
  module Queue_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, count : UInt<3>}
    
    cmem ram : UInt<32>[4] @[Decoupled.scala 218:16]
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg value_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT <= io.enq.bits @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      skip @[Decoupled.scala 233:17]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _io_deq_valid_T = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 259:14]
    
  module Queue_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, count : UInt<3>}
    
    cmem ram : UInt<32>[4] @[Decoupled.scala 218:16]
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg value_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT <= io.enq.bits @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      skip @[Decoupled.scala 233:17]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _io_deq_valid_T = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 259:14]
    
  module Queue_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, count : UInt<3>}
    
    cmem ram : UInt<32>[4] @[Decoupled.scala 218:16]
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg value_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 221:27]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33]
    node _empty_T = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 229:17]
      infer mport MPORT = ram[value], clock @[Decoupled.scala 230:8]
      MPORT <= io.enq.bits @[Decoupled.scala 230:24]
      node wrap = eq(value, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      skip @[Decoupled.scala 229:17]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(value_1, UInt<2>("h03")) @[Counter.scala 72:24]
      node _value_T_2 = add(value_1, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
      value_1 <= _value_T_3 @[Counter.scala 76:15]
      skip @[Decoupled.scala 233:17]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
      skip @[Decoupled.scala 236:28]
    node _io_deq_valid_T = eq(empty, UInt<1>("h00")) @[Decoupled.scala 240:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 240:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h00")) @[Decoupled.scala 241:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 241:16]
    infer mport io_deq_bits_MPORT = ram[value_1], clock @[Decoupled.scala 242:21]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 242:15]
    node _ptr_diff_T = sub(value, value_1) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 257:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 259:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 259:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 259:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 259:14]
    
  module Arbiter : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt}, chosen : UInt<2>}
    
    io.chosen <= UInt<2>("h03") @[Arbiter.scala 123:13]
    io.out.bits <= io.in[3].bits @[Arbiter.scala 124:15]
    when io.in[2].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<2>("h02") @[Arbiter.scala 127:17]
      io.out.bits <= io.in[2].bits @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    when io.in[1].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h01") @[Arbiter.scala 127:17]
      io.out.bits <= io.in[1].bits @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    when io.in[0].valid : @[Arbiter.scala 126:27]
      io.chosen <= UInt<1>("h00") @[Arbiter.scala 127:17]
      io.out.bits <= io.in[0].bits @[Arbiter.scala 128:19]
      skip @[Arbiter.scala 126:27]
    node _grant_T = or(io.in[0].valid, io.in[1].valid) @[Arbiter.scala 31:68]
    node _grant_T_1 = or(_grant_T, io.in[2].valid) @[Arbiter.scala 31:68]
    node grant_1 = eq(io.in[0].valid, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node grant_2 = eq(_grant_T, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node grant_3 = eq(_grant_T_1, UInt<1>("h00")) @[Arbiter.scala 31:78]
    node _io_in_0_ready_T = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 134:14]
    node _io_in_1_ready_T = and(grant_1, io.out.ready) @[Arbiter.scala 134:19]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 134:14]
    node _io_in_2_ready_T = and(grant_2, io.out.ready) @[Arbiter.scala 134:19]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 134:14]
    node _io_in_3_ready_T = and(grant_3, io.out.ready) @[Arbiter.scala 134:19]
    io.in[3].ready <= _io_in_3_ready_T @[Arbiter.scala 134:14]
    node _io_out_valid_T = eq(grant_3, UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _io_out_valid_T_1 = or(_io_out_valid_T, io.in[3].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _io_out_valid_T_1 @[Arbiter.scala 135:16]
    
  module Task1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}[4], out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}, flip Addr : UInt<5>, data_out : UInt<32>[4]}
    
    io.out.bits <= UInt<1>("h00") @[Task1.scala 17:16]
    io.out.valid <= UInt<1>("h00") @[Task1.scala 18:17]
    inst queue0 of Queue @[Decoupled.scala 296:21]
    queue0.clock <= clock
    queue0.reset <= reset
    queue0.io.enq.valid <= io.in[0].valid @[Decoupled.scala 297:22]
    queue0.io.enq.bits <= io.in[0].bits @[Decoupled.scala 298:21]
    io.in[0].ready <= queue0.io.enq.ready @[Decoupled.scala 299:17]
    inst queue1 of Queue_1 @[Decoupled.scala 296:21]
    queue1.clock <= clock
    queue1.reset <= reset
    queue1.io.enq.valid <= io.in[1].valid @[Decoupled.scala 297:22]
    queue1.io.enq.bits <= io.in[1].bits @[Decoupled.scala 298:21]
    io.in[1].ready <= queue1.io.enq.ready @[Decoupled.scala 299:17]
    inst queue2 of Queue_2 @[Decoupled.scala 296:21]
    queue2.clock <= clock
    queue2.reset <= reset
    queue2.io.enq.valid <= io.in[2].valid @[Decoupled.scala 297:22]
    queue2.io.enq.bits <= io.in[2].bits @[Decoupled.scala 298:21]
    io.in[2].ready <= queue2.io.enq.ready @[Decoupled.scala 299:17]
    inst queue3 of Queue_3 @[Decoupled.scala 296:21]
    queue3.clock <= clock
    queue3.reset <= reset
    queue3.io.enq.valid <= io.in[3].valid @[Decoupled.scala 297:22]
    queue3.io.enq.bits <= io.in[3].bits @[Decoupled.scala 298:21]
    io.in[3].ready <= queue3.io.enq.ready @[Decoupled.scala 299:17]
    smem mem : UInt<4>[4][1024], undefined @[Task1.scala 27:26]
    inst arb_priority of Arbiter @[Task1.scala 28:31]
    arb_priority.clock <= clock
    arb_priority.reset <= reset
    reg vector : UInt[4], clock @[Task1.scala 29:21]
    reg mask : UInt<1>[4], clock @[Task1.scala 30:20]
    mask[0] <= UInt<1>("h00") @[Task1.scala 31:13]
    mask[1] <= UInt<1>("h00") @[Task1.scala 32:13]
    mask[2] <= UInt<1>("h00") @[Task1.scala 33:13]
    mask[3] <= UInt<1>("h00") @[Task1.scala 34:13]
    arb_priority.io.in[0].bits <= queue0.io.deq.bits @[Task1.scala 36:12]
    arb_priority.io.in[0].valid <= queue0.io.deq.valid @[Task1.scala 36:12]
    queue0.io.deq.ready <= arb_priority.io.in[0].ready @[Task1.scala 36:12]
    arb_priority.io.in[1].bits <= queue1.io.deq.bits @[Task1.scala 37:12]
    arb_priority.io.in[1].valid <= queue1.io.deq.valid @[Task1.scala 37:12]
    queue1.io.deq.ready <= arb_priority.io.in[1].ready @[Task1.scala 37:12]
    arb_priority.io.in[2].bits <= queue2.io.deq.bits @[Task1.scala 38:12]
    arb_priority.io.in[2].valid <= queue2.io.deq.valid @[Task1.scala 38:12]
    queue2.io.deq.ready <= arb_priority.io.in[2].ready @[Task1.scala 38:12]
    arb_priority.io.in[3].bits <= queue3.io.deq.bits @[Task1.scala 39:12]
    arb_priority.io.in[3].valid <= queue3.io.deq.valid @[Task1.scala 39:12]
    queue3.io.deq.ready <= arb_priority.io.in[3].ready @[Task1.scala 39:12]
    io.out.bits <= arb_priority.io.out.bits @[Task1.scala 40:12]
    io.out.valid <= arb_priority.io.out.valid @[Task1.scala 40:12]
    arb_priority.io.out.ready <= io.out.ready @[Task1.scala 40:12]
    when io.in[0].valid : @[Task1.scala 46:25]
      mask[0] <= UInt<1>("h01") @[Task1.scala 47:17]
      skip @[Task1.scala 46:25]
    else : @[Task1.scala 48:31]
      when io.in[1].valid : @[Task1.scala 48:31]
        mask[1] <= UInt<1>("h01") @[Task1.scala 49:17]
        skip @[Task1.scala 48:31]
      else : @[Task1.scala 50:31]
        when io.in[2].valid : @[Task1.scala 50:31]
          mask[2] <= UInt<1>("h01") @[Task1.scala 51:17]
          skip @[Task1.scala 50:31]
        else : @[Task1.scala 52:31]
          when io.in[3].valid : @[Task1.scala 52:31]
            mask[3] <= UInt<1>("h01") @[Task1.scala 53:17]
            skip @[Task1.scala 52:31]
    when mask[0] : @[Task1.scala 57:18]
      vector[0] <= io.in[0].bits @[Task1.scala 58:19]
      vector[1] <= UInt<1>("h00") @[Task1.scala 59:19]
      vector[2] <= UInt<1>("h00") @[Task1.scala 60:19]
      vector[3] <= UInt<1>("h00") @[Task1.scala 61:19]
      write mport MPORT = mem[io.Addr], clock
      MPORT[0] <= vector[0]
      MPORT[1] <= vector[1]
      MPORT[2] <= vector[2]
      MPORT[3] <= vector[3]
      skip @[Task1.scala 57:18]
    else : @[Task1.scala 63:24]
      when mask[1] : @[Task1.scala 63:24]
        vector[0] <= UInt<1>("h00") @[Task1.scala 64:19]
        vector[1] <= io.in[1].bits @[Task1.scala 65:19]
        vector[2] <= UInt<1>("h00") @[Task1.scala 66:19]
        vector[3] <= UInt<1>("h00") @[Task1.scala 67:19]
        write mport MPORT_1 = mem[io.Addr], clock
        MPORT_1[0] <= vector[0]
        MPORT_1[1] <= vector[1]
        MPORT_1[2] <= vector[2]
        MPORT_1[3] <= vector[3]
        skip @[Task1.scala 63:24]
      else : @[Task1.scala 69:24]
        when mask[2] : @[Task1.scala 69:24]
          vector[0] <= UInt<1>("h00") @[Task1.scala 70:19]
          vector[1] <= UInt<1>("h00") @[Task1.scala 71:19]
          vector[2] <= io.in[2].bits @[Task1.scala 72:19]
          vector[3] <= UInt<1>("h00") @[Task1.scala 73:19]
          write mport MPORT_2 = mem[io.Addr], clock
          MPORT_2[0] <= vector[0]
          MPORT_2[1] <= vector[1]
          MPORT_2[2] <= vector[2]
          MPORT_2[3] <= vector[3]
          skip @[Task1.scala 69:24]
        else : @[Task1.scala 75:24]
          when mask[3] : @[Task1.scala 75:24]
            vector[0] <= UInt<1>("h00") @[Task1.scala 76:19]
            vector[1] <= UInt<1>("h00") @[Task1.scala 77:19]
            vector[2] <= UInt<1>("h00") @[Task1.scala 78:19]
            vector[3] <= io.in[3].bits @[Task1.scala 79:19]
            write mport MPORT_3 = mem[io.Addr], clock
            MPORT_3[0] <= vector[0]
            MPORT_3[1] <= vector[1]
            MPORT_3[2] <= vector[2]
            MPORT_3[3] <= vector[3]
            skip @[Task1.scala 75:24]
    read mport MPORT_4 = mem[io.Addr], clock @[Task1.scala 84:28]
    io.data_out[0] <= MPORT_4[0] @[Task1.scala 84:17]
    io.data_out[1] <= MPORT_4[1] @[Task1.scala 84:17]
    io.data_out[2] <= MPORT_4[2] @[Task1.scala 84:17]
    io.data_out[3] <= MPORT_4[3] @[Task1.scala 84:17]
    
